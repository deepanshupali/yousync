// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //if you want to change the output directory for the generated client
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  provider      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime?   // âœ… for guest expiry tracking

  memberships Membership[]
  messages    Message[]
  bans        Ban[]
  rooms       Room[]        @relation("UserRooms")
  accounts    Account[]
  sessions    Session[]
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// APP MODELS
//
model Room {
  id        String       @id 
  title     String
  adminId   String       @unique   // one user can own only one room
  admin     User         @relation("UserRooms", fields: [adminId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  memberships Membership[]
  messages    Message[]
  videoState  VideoState?
  bans        Ban[]
}

model Membership {
  id       String   @id @default(cuid())
  userId   String   @unique // one user can only be in one room at a time
  roomId   String
  role     String   @default("member") // admin/member
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  text      String
  roomId    String
  userId    String?
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

model VideoState {
  id        String   @id @default(cuid())
  roomId    String   @unique
  source    String
  playing   Boolean  @default(false)
  position  Float    @default(0)
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id])
}

model Ban {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  reason    String?
  expiresAt DateTime?
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId]) // one ban per user per room
}